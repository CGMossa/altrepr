[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 altrepr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/altrepr.html","id":"altrep-101","dir":"Articles","previous_headings":"","what":"ALTREP 101","title":"Intro to ALTREP and Compact Sequences","text":"Note: altrepr vignettes, footnotes1 used point relevant information R source code. casual reader need follow links. ALTREP, short alternate representation, mechanism base R package authors can write alternative versions R’s base data types, different layout memory. many possible reasons might advantageous : Data can represented compactly (discussed vignette) Functions can reduce computation returning lazy ALTREP results evaluate entries needed (see vignette(\"deferred_string\")) Metadata can added vectors invisible un-editable users (see vignette(\"wrapper_objects\")) storage mechanism vector can abstracted away, allowing data might even exist memory (see vignette(\"memmap\")) present, types can ALTREPPED include2: Integer vectors Double vectors Logical vectors String vectors Complex vectors Raw vectors Lists advanced data types environments currently can’t ALTREPs. Although consider ALTREPs different memory representation, end actually stored using R’s normal SEXPREC structures like lists, environments vectors. difference authors flexibility, , example, use list represent vector, use several vectors represent single vector. Currently behaviours can overridden ALTREP include3: length calculated (returned length()) data converted array data C elements extracted vector R (using [ [[) array considered sorted minimum maximum values vector calculated might wonder couldn’t done one R’s class systems, like S3 S4, since support overriding behaviour length, [, max etc. reasons include: ALTREP allows editing behaviours edited S3, example making custom DATAPTR, pointer vector data. Custom ALTREP state hidden user (although altrepr makes less true) Authors can use hacks break exposed R, using character vector containing null pointers4 Presumably method dispatch faster ALTREP doesn’t involve searching S3 method table. verified benchmarks.","code":""},{"path":"/articles/altrepr.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Intro to ALTREP and Compact Sequences","text":"Let’s get hands-altrepr looking “compact sequences”, perhaps famous ALTREP class R. Compact sequences introduced R 3.5.0. simply integer (double) vectors represented “range”: store start, length, step sequence, rather storing every individual element range, can save lot memory. Compact sequences created : operator, seq family functions. Let’s investigate!","code":""},{"path":"/articles/altrepr.html","id":"the-tip-of-the-iceberg","dir":"Articles","previous_headings":"","what":"The Tip of the Iceberg","title":"Intro to ALTREP and Compact Sequences","text":"start need install load altrepr package: Firstly, can use is_altrep() function distinguish ALTREP ordinary vectors: Next, can get details ALTREP’s data using alt_details(): class_name human-readable class name pkg_name package ALTREP defined base_type R data type ALTREP representing ’ll go bit detail data fields later . want, instead using alt_details(), can used targeted functions access fields:","code":"remotes::install_github(\"multimeric/altrepr\") library(altrepr) is_altrep(c(1, 2, 3)) #> [1] FALSE is_altrep(1:3) #> [1] TRUE is_altrep(seq(1, 3)) #> [1] TRUE alt_details(1:3) #> $class_name #> [1] \"compact_intseq\" #>  #> $pkg_name #> [1] \"base\" #>  #> $base_type #> [1] \"integer\" #>  #> $data1 #> [1] 3 1 1 #>  #> $data2 #> NULL alt_classname(1:3) #> [1] \"compact_intseq\" alt_pkgname(1:3) #> [1] \"base\""},{"path":"/articles/altrepr.html","id":"compact-real","dir":"Articles","previous_headings":"","what":"Compact Real","title":"Intro to ALTREP and Compact Sequences","text":"actually another related class compact_intseq, can get converting intseq double: almost properties compact_intseq, course treated numeric/real/double R.","code":"x <- as.double(1:5) alt_details(x) #> $class_name #> [1] \"compact_realseq\" #>  #> $pkg_name #> [1] \"base\" #>  #> $base_type #> [1] \"double\" #>  #> $data1 #> [1] 5 1 1 #>  #> $data2 #> NULL"},{"path":"/articles/altrepr.html","id":"function-naming-scheme","dir":"Articles","previous_headings":"","what":"Function Naming Scheme","title":"Intro to ALTREP and Compact Sequences","text":"Functions altrepr starting alt_ is_alt_ relate ALTREP class. specific ALTREP classes utility functions. compact vectors, prefix compact_ is_compact. first example see simple check compact vectors:","code":"is_compact_vec(1:3) #> [1] TRUE is_compact_vec(c(1, 2)) #> [1] FALSE"},{"path":"/articles/altrepr.html","id":"coercing-to-a-standard-integer-vector","dir":"Articles","previous_headings":"","what":"Coercing to a Standard Integer Vector","title":"Intro to ALTREP and Compact Sequences","text":"ALTREP API doesn’t currently provide function forcing ALTREP vector converted ’s standard representation form, compact vectors can expanded using operation clones/duplicates vector. simplest way copy vector use empty index ([]). can use feature prove importance compact sequence class, comparing memory usage traditional integer vector, compact version: Let’s start enormous vector: even 1 billion elements, ’s actually big! Now let’s force vector expand. notice seemingly simple operation actually takes suspiciously long. course 1 billion element standard representation vector generated behind scenes: go. ’s longer ALTREP, ’ve worked saved 4 GB using ALTREP! reference, altrepr also provides utility function use case:","code":"x <- 1:10^9 is_altrep(x) #> [1] TRUE lobstr::obj_size(x) #> 680 B system.time({   y <- x[] }) #>    user  system elapsed  #>   0.865   1.183   2.060 is_altrep(y) #> [1] FALSE lobstr::obj_size(y) #> 4.00 GB y <- compact_to_standard(x) is_altrep(y) #> [1] FALSE lobstr::obj_size(y) #> 4.00 GB"},{"path":"/articles/altrepr.html","id":"reading-altrep-data","dir":"Articles","previous_headings":"","what":"Reading ALTREP Data","title":"Intro to ALTREP and Compact Sequences","text":"ALTREP classes two “slots” storing data (S4 slots, ’s helpful analogy). respectively called data1 data2. slots can store type R object, including recursive types like lists, isn’t really restriction.","code":""},{"path":"/articles/altrepr.html","id":"data1","dir":"Articles","previous_headings":"Reading ALTREP Data","what":"data1","title":"Intro to ALTREP and Compact Sequences","text":"case compact sequences, data1 used store parameters sequence double (integer!) vector first entry contains length sequence second entry contains start value sequence third entry contains step, currently always 1 -1 can prove using alt_data1() function: Actually altrepr utility function finding information, specifically compact vectors:","code":"alt_data1(1:3) #> [1] 3 1 1 alt_data1(2:3) #> [1] 2 2 1 alt_data1(3:2) #> [1]  2  3 -1 compact_details(4:2) #> $length #> [1] 3 #>  #> $start #> [1] 4 #>  #> $step #> [1] -1 #>  #> $expanded #> NULL"},{"path":"/articles/altrepr.html","id":"data2-and-the-expanded-form","dir":"Articles","previous_headings":"Reading ALTREP Data","what":"data2 and the Expanded Form","title":"Intro to ALTREP and Compact Sequences","text":"Compact seqs considered start “compact” form, can see end output alt_inspect(). function prints internal information altrep vector often seems informative dealing built-ALTREP types: “compact” means data2 NULL, initial value: shortcut method check compact_is_expanded: DATAPTR sequence accessed (pointer array data vector), forces compact sequence expand. altrepr special built-function forces compact vector expand without side effects: Notably x still ALTREP, hasn’t coerced standard representation vector: data2 value, linked expanded form, now set full vector integer data:","code":"x <- 1:3 alt_inspect(x) #> @562ce7edea58 13 INTSXP g0c0 [REF(65535)]  1 : 3 (compact) alt_data2(x) #> NULL compact_is_expanded(x) #> [1] FALSE compact_expand(x) alt_inspect(x) #> @562ce7edea58 13 INTSXP g0c0 [REF(65535)]  1 : 3 (expanded) compact_is_expanded(x) #> [1] TRUE is_altrep(x) #> [1] TRUE alt_data2(x) #> [1] 1 2 3"},{"path":"/articles/altrepr.html","id":"modifying-altrep-data","dir":"Articles","previous_headings":"","what":"Modifying ALTREP Data","title":"Intro to ALTREP and Compact Sequences","text":"Note: improperly modifying ALTREP data can potentially dangerous risk crashing corrupting R session done incorrectly!. altrepr also provides set_alt_data1 set_alt_data2 modifying ALTREP data. example, let’s create compact range modify . safe ’re replacing double vector another double vector follows layout described . Firstly note ’ve taken range 1:5 replaced 3:4, set start range 3, length 2. Also, importantly, note x modified -place. means shallow copy compact sequence (e.g. y <- x ) also modified. means ’s actually way make modified copy x normal R:","code":"x <- 1:5 set_alt_data1(x, c(2, 3, 1)) x #> [1] 3 4 x <- 1:5 y <- x set_alt_data1(x, c(2, 3, 1)) y #> [1] 3 4"},{"path":"/articles/compact_seq.html","id":"altrep-101","dir":"Articles","previous_headings":"","what":"ALTREP 101","title":"Intro to ALTREP and Compact Sequences","text":"Note: altrepr vignettes, footnotes1 used point relevant information R source code. casual reader need follow links. ALTREP, short alternate representation, mechanism base R package authors can write alternative versions R’s base data types, different layout memory. many possible reasons might advantageous : Data can represented compactly (discussed vignette) Functions can reduce computation returning lazy ALTREP results evaluate entries needed (see Deferred String vignette) Adding metadata vectors invisible un-editable users (see Wrapper Objects vignette) Abstracting away actual storage mechanism vector, might even exist memory (see MemMap vignette) present, types can ALTREPPED include2: Integer vectors Double vectors Logical vectors String vectors Complex vectors Raw vectors Lists advanced data types environments currently can’t ALTREPs. Although consider ALTREPs different memory representation, end actually stored using R’s normal SEXPREC structures like lists, environments vectors. difference authors flexibility, , example, use list represent vector, use several vectors represent single vector. Currently behaviours can overridden ALTREP include3: length calculated (returned length()) data converted array data C elements extracted vector R (using [ [[) array considered sorted minimum maximum values vector calculated might wonder couldn’t done one R’s class systems, like S3 S4, since support overriding behaviour length, [, max etc. reasons include: ALTREP allows editing behaviours edited S3, example making custom DATAPTR, pointer vector data. Custom ALTREP state hidden user (although altrepr makes less true) Authors can use hacks break exposed R, using character vector containing null pointers4 Presumably method dispatch faster ALTREP doesn’t involve searching S3 method table. verified benchmarks.","code":""},{"path":"/articles/compact_seq.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Intro to ALTREP and Compact Sequences","text":"Let’s get hands-altrepr looking “compact sequences”, perhaps famous ALTREP class R. Compact sequences introduced R 3.5.0. simply integer (double) vectors represented “range”: store start, length, step sequence, rather storing every individual element range, can save lot memory. Compact sequences created : operator, seq family functions. Let’s investigate!","code":""},{"path":"/articles/compact_seq.html","id":"the-tip-of-the-iceberg","dir":"Articles","previous_headings":"","what":"The Tip of the Iceberg","title":"Intro to ALTREP and Compact Sequences","text":"start need install load altrepr package: Firstly, can use is_altrep class distinguish ALTREP ordinary vectors: Next, can get details ALTREP’s data using alt_details: class_name human-readable class name pkg_name package ALTREP defined base_type R data type ALTREP representing ’ll go bit detail data fields later . want, instead using alt_details, can used targeted functions access fields:","code":"remotes::install_github(\"multimeric/altrepr\") library(altrepr) is_altrep(c(1, 2, 3)) #> [1] FALSE is_altrep(1:3) #> [1] TRUE is_altrep(seq(1, 3)) #> [1] TRUE alt_details(1:3) #> $class_name #> [1] \"compact_intseq\" #>  #> $pkg_name #> [1] \"base\" #>  #> $base_type #> [1] \"integer\" #>  #> $data1 #> [1] 3 1 1 #>  #> $data2 #> NULL alt_classname(1:3) #> [1] \"compact_intseq\" alt_pkgname(1:3) #> [1] \"base\""},{"path":"/articles/compact_seq.html","id":"compact-real","dir":"Articles","previous_headings":"","what":"Compact Real","title":"Intro to ALTREP and Compact Sequences","text":"actually another related class compact_intseq, can get converting intseq double: almost properties compact_intseq, course treated numeric/real/double R.","code":"x <- as.double(1:5) alt_details(x) #> $class_name #> [1] \"compact_realseq\" #>  #> $pkg_name #> [1] \"base\" #>  #> $base_type #> [1] \"double\" #>  #> $data1 #> [1] 5 1 1 #>  #> $data2 #> NULL"},{"path":"/articles/compact_seq.html","id":"function-naming-scheme","dir":"Articles","previous_headings":"","what":"Function Naming Scheme","title":"Intro to ALTREP and Compact Sequences","text":"Functions altrepr starting alt_ is_alt_ relate ALTREP class. specific ALTREP classes utility functions. compact vectors, prefix compact_ is_compact. first example see simple check compact vectors:","code":"is_compact_vec(1:3) #> [1] TRUE is_compact_vec(c(1, 2)) #> [1] FALSE"},{"path":"/articles/compact_seq.html","id":"coercing-to-a-standard-integer-vector","dir":"Articles","previous_headings":"","what":"Coercing to a Standard Integer Vector","title":"Intro to ALTREP and Compact Sequences","text":"ALTREP API doesn’t currently provide function forcing ALTREP vector converted ’s standard representation form, compact vectors can expanded using operation clones/duplicates vector. simplest way copy vector use empty index ([]), although note won’t copy attributes, vector values. can use feature prove importance compact sequence class, comparing memory usage traditional integer vector, compact version: Let’s start enormous vector: even 100 million elements, ’s actually big! Now let’s force vector expand. notice seemingly simple operation actually takes suspiciously long. course 1 billion element standard representation vector generated behind scenes: go. ’s longer ALTREP, ’ve worked saved 4 GB using ALTREP! reference, altrepr also provides utility function use case:","code":"x <- 1:10^9 is_altrep(x) #> [1] TRUE lobstr::obj_size(x) #> 680 B system.time({   y <- x[] }) #>    user  system elapsed  #>   0.853   1.282   2.147 is_altrep(y) #> [1] FALSE lobstr::obj_size(y) #> 4.00 GB y <- compact_to_standard(x) is_altrep(y) #> [1] FALSE lobstr::obj_size(y) #> 4.00 GB"},{"path":"/articles/compact_seq.html","id":"reading-altrep-data","dir":"Articles","previous_headings":"","what":"Reading ALTREP Data","title":"Intro to ALTREP and Compact Sequences","text":"ALTREP classes two “slots” storing data (S4 slots, ’s helpful analogy). respectively called data1 data2. slots can store type R object, including recursive types like lists, isn’t really restriction.","code":""},{"path":"/articles/compact_seq.html","id":"data1","dir":"Articles","previous_headings":"","what":"data1","title":"Intro to ALTREP and Compact Sequences","text":"case compact sequences, data1 used store parameters sequence double (integer!) vector first entry contains length sequence second entry contains start value sequence third entry contains step, currently always 1 -1 can prove using alt_data1() function: Actually altrepr utility function finding information, specifically compact vectors:","code":"alt_data1(1:3) #> [1] 3 1 1 alt_data1(2:3) #> [1] 2 2 1 alt_data1(3:2) #> [1]  2  3 -1 compact_details(4:2) #> $length #> [1] 3 #>  #> $start #> [1] 4 #>  #> $step #> [1] -1 #>  #> $expanded #> NULL"},{"path":"/articles/compact_seq.html","id":"data2-and-the-expanded-form","dir":"Articles","previous_headings":"data1","what":"data2 and the Expanded Form","title":"Intro to ALTREP and Compact Sequences","text":"Compact seqs considered start “compact” form, can see end output alt_inspect. function prints internal information altrep vector often seems informative dealing built-ALTREP types: “compact” means data2 NULL, initial value: shortcut method check compact_is_expanded: DATAPTR sequence accessed (pointer array data vector), forces compact sequence expand. altrepr special built-function forces compact vector expand without side effects: Notably x still ALTREP, hasn’t coerced standard representation vector: data2 value, linked expanded form, now set full vector integer data:","code":"x <- 1:3 alt_inspect(x) #> @56113b573588 13 INTSXP g0c0 [REF(65535)]  1 : 3 (compact) alt_data2(x) #> NULL compact_is_expanded(x) #> [1] FALSE compact_expand(x) #> [1] 1 2 3 alt_inspect(x) #> @56113b573588 13 INTSXP g0c0 [REF(65535)]  1 : 3 (expanded) compact_is_expanded(x) #> [1] TRUE is_altrep(x) #> [1] TRUE alt_data2(x) #> [1] 1 2 3"},{"path":"/articles/compact_seq.html","id":"modifying-altrep-data","dir":"Articles","previous_headings":"data1","what":"Modifying ALTREP Data","title":"Intro to ALTREP and Compact Sequences","text":"Note: improperly modifying ALTREP data can potentially dangerous risk crashing corrupting R session done incorrectly!. altrepr also provides set_alt_data1 set_alt_data2 modifying ALTREP data. example, let’s create compact range modify . safe ’re replacing double vector another double vector follows layout described . Firstly note ’ve taken range 1:5 replaced 3:4, set start range 3, length 2. Also, importantly, note x modified -place. noted , copy compact sequence longer ALTREP. means ’s actually way make modified copy x normal R.","code":"x <- 1:5 set_alt_data1(x, c(2, 3, 1)) x #> [1] 3 4"},{"path":"/articles/deferred_string.html","id":"basics","dir":"Articles","previous_headings":"","what":"Basics","title":"Deferred Strings","text":"Note: read vignette(\"altrepr\") order understand one Another built-ALTREP class R “Deferred String”, class instantiated convert double character vector1: convert integer vector character vector: Interestingly case logical conversions:","code":"library(altrepr) x <- as.character(1) is_altrep(x) #> [1] TRUE alt_classname(x) #> [1] \"deferred_string\" 1L |> as.character() |> alt_classname() #> [1] \"deferred_string\" TRUE |> as.character() |> is_altrep() #> [1] FALSE"},{"path":"/articles/deferred_string.html","id":"memory-saving","dir":"Articles","previous_headings":"","what":"Memory Saving","title":"Deferred Strings","text":"purpose deferred conversion probably save memory, since cases ’s smaller store original numeric vector numeric, convert entries character demand. compact sequences, can convert ALTREP standard rep using []: 10 entries, deferred ALTREP representation actually bit larger standard representation, anything much larger vastly efficient:","code":"x <- as.character(1:10) lobstr::obj_size(x) #> 1.32 kB y <- x[] is_altrep(y) #> [1] FALSE lobstr::obj_size(y) #> 736 B x <- as.character(1:1000) lobstr::obj_size(x) #> 1.32 kB x[] |> lobstr::obj_size() #> 64.05 kB"},{"path":"/articles/deferred_string.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Deferred Strings","text":"first data slot deferred string basically just copy original numeric vector deferring string initialised using2. Unfortunately reason (bug?), can’t actually interrogate vector directly, crash R interpreter. best can inspect deferred string: top line showing x deferred string, second line indicates contains integer vector (INTSXP) explained . data2 bit easier interrogate. ’s simply character vector caches “true” result conversion character vector. According C code, entry data2 set NULL initially, “expanded” final value -demand, needed3. However difficult demonstrate accessing single elements doesn’t seem actually expand might expect. However, ’s easy see changing character vector data2 affects calculated elements array:","code":"x <- as.character(1:5) alt_inspect(x) #> @55fc44312200 16 STRSXP g0c0 [REF(3)]   <deferred string conversion> #>   @55fc443122a8 13 INTSXP g0c0 [REF(65535)]  1 : 5 (compact) alt_data2(x) #> NULL set_alt_data2(x, LETTERS[1:5]) x #> [1] \"A\" \"B\" \"C\" \"D\" \"E\""},{"path":"/articles/deferred_string.html","id":"compact-and-expanded","dir":"Articles","previous_headings":"","what":"Compact and Expanded","title":"Deferred Strings","text":"Like compact sequences, deferred strings considered either compact expanded. can expand string check state using corresponding utility methods: However, unlike compact sequences, amount data data2 isn’t deciding factor sequence expanded. ’s actually absence data data1 .","code":"x <- as.character(1:5) deferred_is_expanded(x) #> [1] FALSE deferred_expand(x) deferred_is_expanded(x) #> [1] TRUE x <- as.character(1:5) set_alt_data1(x, NULL) alt_inspect(x) #> @55fc427853d8 16 STRSXP g0c0 [REF(4)]   <expanded string conversion> #>   @55fc3e8dde80 00 NILSXP g1c0 [MARK,REF(65535)]"},{"path":"/articles/memmap.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Memory Maps","text":"Note: read vignette(\"altrepr\") order understand one Memory mapping (memmap) refers mapping file disk object memory. Data loaded disk required, meaning entire object can much larger space memory. Apparently, R contains family memmap ALTREP classes provide behaviour.","code":""},{"path":"/articles/memmap.html","id":"creating-a-memory-map","dir":"Articles","previous_headings":"","what":"Creating a Memory Map","title":"Memory Maps","text":"Seemingly, interface memmap classes provided R another internal function. words, memmap classes public constructor R yet. doesn’t mean altrepr doesn’t help, though. mmap_make() function attempts turn internal constructor something bit user friendly. test , first create dataset play : write dataset temporary file, open memory mapped vector exists disk!","code":"data <- rnorm(n=5) data #> [1] -1.0824438  1.8582515 -1.7921479 -3.0155199 -0.4661626 library(altrepr) filename <- tempfile() mapped <- mmap_make(filename, data) mapped #> [1] -1.0824438  1.8582515 -1.7921479 -3.0155199 -0.4661626"},{"path":"/articles/memmap.html","id":"prying-into-the-memory-map","dir":"Articles","previous_headings":"","what":"Prying into the Memory Map","title":"Memory Maps","text":"classname mmap_ + data type, case real: data1 slot pointer memory map , memory (although ’s kind virtual pointer memory exists disk): data2 slot contains list, whose entries are1: name file memory mapped size memory map bytes number entries vector SEXPTYPE memory map (either 13 integer, 14 double) boolean called ptrOK. unclear planned . boolean, 1 memory map requested writable Another boolean called serOK. Also unclear means. usual, altrepr provides utility function easily accessing fields:","code":"alt_classname(mapped) #> [1] \"mmap_real\" alt_data1(mapped) #> <pointer: 0x7f451612f000> alt_data2(mapped) #> [[1]] #> [1] \"/tmp/Rtmp4JS6iT/file145e2b0243f1\" #>  #> [[2]] #> [1] 40  5 #>  #> [[3]] #> [1] 14  1  0  0 mmap_details(mapped) #> $file_name #> [1] \"/tmp/Rtmp4JS6iT/file145e2b0243f1\" #>  #> $size_bytes #> [1] 40 #>  #> $length #> [1] 5 #>  #> $type #> [1] \"double\" #>  #> $ptrOK #> [1] TRUE #>  #> $wrtOK #> [1] FALSE #>  #> $serOK #> [1] FALSE"},{"path":"/articles/wrapper_objects.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Wrapper Objects","text":"Note: read vignette(\"altrepr\") order understand one Wrapper objects (rare) description R source code1. Good start! Wrapper objects ALTREP objects designed hold attributes potentially large object /meta data object.","code":""},{"path":"/articles/wrapper_objects.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"Wrapper Objects","text":"Actually metadata ’s referred something obvious like attributes() object. ’s simply vector integers describe vector way2. Currently include: SORTED_DECR_NA_1ST: -2 (sorted decreasing order, NA values sorted first) SORTED_DECR: -1 (sorted decreasing order) KNOWN_UNSORTED: 0 SORTED_INCR: 1 (sorted increasing order) SORTED_INCR_NA_1ST: 2 UNKNOWN_SORTEDNESS: NA_integer_ NA. 0 vector might possibly contain NA values, otherwise 1. public API C functions INTEGER_NO_NA, INTEGER_IS_SORTED etc4.","code":""},{"path":"/articles/wrapper_objects.html","id":"wrapper-objects-in-the-wild","dir":"Articles","previous_headings":"","what":"Wrapper Objects in the Wild","title":"Wrapper Objects","text":"likely situation encounter wrapper objects normal R usage via sort function. () parameter configurations sort cause function return ALTREP: can normal prying class metadata:","code":"library(altrepr) x <- sort(5:1) is_altrep(x) #> [1] TRUE alt_classname(x) #> [1] \"wrap_integer\" alt_pkgname(x) #> [1] \"base\""},{"path":"/articles/wrapper_objects.html","id":"inspecting-wrapper-metadata-in-r","dir":"Articles","previous_headings":"","what":"Inspecting Wrapper Metadata in R","title":"Wrapper Objects","text":"main public interface sorted metadata .unsorted function, basically checks metadata using mechanisms discussed . “true public” function sense ’s stable function provided base R, can rely long term: main public interface NA flag anyNA() function: course altrepr provides user-friendly utility inspecting metadata known wrapper objects:","code":"is.unsorted(5:1) #> [1] TRUE 5:1 |> sort() |> is.unsorted() #> [1] FALSE c(1, 2, NA, 3) |> anyNA() #> [1] TRUE c(1, 2, 3) |> anyNA() #> [1] FALSE 5:1 |>   sort() |>   wrapper_details() #> $contents #> [1] 1 2 3 4 5 #>  #> $has_na #> [1] FALSE #>  #> $is_sorted #> [1] TRUE #>  #> $descending #> [1] FALSE #>  #> $na_first #> [1] FALSE"},{"path":"/articles/wrapper_objects.html","id":"creating-custom-wrapper-types","dir":"Articles","previous_headings":"","what":"Creating Custom Wrapper Types","title":"Wrapper Objects","text":"altrepr also provides user-friendly function creating wrapper types, without needing sort. lets us blatantly lie R vectors! fools public R functions well: ’s also internal R function can use (risk) called wrap_meta. isn’t documented, takes 3 arguments: R object wrap integer indicating sortedness (see sortedness enum values) integer indicating whether contains NA. 1 , otherwise 0.","code":"wrapper <- wrapper_make(c(5, 3, NA, 1), is_sorted = TRUE, has_na = FALSE) wrapper #> [1]  5  3 NA  1 wrapper_details(wrapper) #> $contents #> [1]  5  3 NA  1 #>  #> $has_na #> [1] FALSE #>  #> $is_sorted #> [1] TRUE #>  #> $descending #> [1] FALSE #>  #> $na_first #> [1] FALSE is.unsorted(wrapper) #> [1] FALSE anyNA(wrapper) #> [1] FALSE x <- wrap_meta(10:1, 0, 0) |> .Internal() alt_classname(x) #> [1] \"wrap_integer\" wrap_meta(10:1, 1, 0) |>    .Internal() |>   is.unsorted() #> [1] FALSE"},{"path":"/articles/wrapper_objects.html","id":"wrapper-data","dir":"Articles","previous_headings":"","what":"Wrapper Data","title":"Wrapper Objects","text":"data types quite simple. data1 contains wrapped object, data2 contains metadata integer vector. Let’s look: Remember 1 1 means “sorted increasing order” “NA values”.","code":"x <- sort(5:1) alt_data1(x) #> [1] 1 2 3 4 5 alt_data2(x) #> [1] 1 1"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Milton. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Milton M (2023). altrepr: Tools exploring working ALTREP objects. https://multimeric.github.io/altrepr/, https://github.com/multimeric/altrepr.","code":"@Manual{,   title = {altrepr: Tools for exploring and working with ALTREP objects},   author = {Michael Milton},   year = {2023},   note = {https://multimeric.github.io/altrepr/, https://github.com/multimeric/altrepr}, }"},{"path":"/index.html","id":"altrepr","dir":"","previous_headings":"","what":"Tools for exploring and working with ALTREP objects","title":"Tools for exploring and working with ALTREP objects","text":"altrepr shines light mysterious ALTREP objects R. offers: Inspection ALTREP types Specialized constructors inspections 4 built-ALTREP classes R Detailed vignettes explore classes, use R, internal workings","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for exploring and working with ALTREP objects","text":"can install development version altrepr like :","code":"remotes::install_github(\"multimeric/altrepr\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tools for exploring and working with ALTREP objects","text":"1:5 just normal integer vector right? Wrong! ’s sneaky ALTREP masquerading integer vector. can dig details: , ’re feeling brave, can even edit ALTREP: information, refer detailed vignettes!","code":"library(altrepr) x <- 1:5 is_altrep(x) #> [1] TRUE alt_details(x) #> $class_name #> [1] \"compact_intseq\" #>  #> $pkg_name #> [1] \"base\" #>  #> $base_type #> [1] \"integer\" #>  #> $data1 #> [1] 5 1 1 #>  #> $data2 #> NULL compact_details(x) #> $length #> [1] 5 #>  #> $start #> [1] 1 #>  #> $step #> [1] 1 #>  #> $expanded #> NULL set_alt_data1(x, c(10, 1, 1)) x #>  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"/reference/alt_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the altrep class of an object. — alt_class","title":"Gets the altrep class of an object. — alt_class","text":"altrep class raw vector whose value uniquely distinguishes class classes. altrep class name class. , can use alt_classname(). unlikely find much meaning actual vector values, might find useful check two objects belong class. meaningful use class check attributes(), recommended instead use dedicated wrapper functions attributes: alt_classname(), alt_pkgname(), alt_type(), alt_details().","code":""},{"path":"/reference/alt_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the altrep class of an object. — alt_class","text":"","code":"alt_class(x)"},{"path":"/reference/alt_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the altrep class of an object. — alt_class","text":"x ALTREP object class","code":""},{"path":"/reference/alt_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the altrep class of an object. — alt_class","text":"raw vector uniquely identifying altrep class x","code":""},{"path":[]},{"path":"/reference/alt_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the altrep class of an object. — alt_class","text":"","code":"identical(alt_class(1:2), alt_class(2:3)) #> [1] TRUE"},{"path":"/reference/alt_classname.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the name of the altrep class of an object — alt_classname","title":"Gets the name of the altrep class of an object — alt_classname","text":"human-readable name altrep class.","code":""},{"path":"/reference/alt_classname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the name of the altrep class of an object — alt_classname","text":"","code":"alt_classname(x)"},{"path":"/reference/alt_classname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the name of the altrep class of an object — alt_classname","text":"x ALTREP object class","code":""},{"path":"/reference/alt_classname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the name of the altrep class of an object — alt_classname","text":"class name character scalar.","code":""},{"path":"/reference/alt_classname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the name of the altrep class of an object — alt_classname","text":"","code":"alt_classname(1:3) #> [1] \"compact_intseq\""},{"path":"/reference/alt_data1.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the first altrep data slot — alt_data1","title":"Gets the first altrep data slot — alt_data1","text":"ALTREP objects two data slots, can hold R type. exact meaning slot can depend entirely ALTREP class wants represent data.","code":""},{"path":"/reference/alt_data1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the first altrep data slot — alt_data1","text":"","code":"alt_data1(x)"},{"path":"/reference/alt_data1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the first altrep data slot — alt_data1","text":"x ALTREP object class","code":""},{"path":"/reference/alt_data1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the first altrep data slot — alt_data1","text":"Possibly R object, including NULL","code":""},{"path":"/reference/alt_data1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gets the first altrep data slot — alt_data1","text":"Although exact meaning slot flexible, convention used R core data1 hold \"compressed\" state type, data2 hold \"expanded\" state. See vignette(\"altrepr\") information.","code":""},{"path":"/reference/alt_data1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the first altrep data slot — alt_data1","text":"","code":"alt_data1(1:3) #> [1] 3 1 1"},{"path":"/reference/alt_data2.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the second altrep data slot. — alt_data2","title":"Gets the second altrep data slot. — alt_data2","text":"ALTREP objects two data slots, can hold R type. exact meaning slot can depend entirely ALTREP class wants represent data.","code":""},{"path":"/reference/alt_data2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the second altrep data slot. — alt_data2","text":"","code":"alt_data2(x)"},{"path":"/reference/alt_data2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the second altrep data slot. — alt_data2","text":"x ALTREP object class","code":""},{"path":"/reference/alt_data2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the second altrep data slot. — alt_data2","text":"Possibly R object, including NULL","code":""},{"path":"/reference/alt_data2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gets the second altrep data slot. — alt_data2","text":"Although exact meaning slot flexible, convention used R core data1 hold \"compressed\" state type, data2 hold \"expanded\" state. See vignette(\"altrepr\") information.","code":""},{"path":"/reference/alt_data2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Gets the second altrep data slot. — alt_data2","text":"Warning: storing result cause R session crash deferred_string ALTREP object.","code":""},{"path":"/reference/alt_data2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the second altrep data slot. — alt_data2","text":"","code":"sort(3:1) |> alt_data2() #> [1] 1 1"},{"path":"/reference/alt_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a summary of the properties of an ALTREP object — alt_details","title":"Returns a summary of the properties of an ALTREP object — alt_details","text":"Returns summary properties ALTREP object","code":""},{"path":"/reference/alt_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a summary of the properties of an ALTREP object — alt_details","text":"","code":"alt_details(x)"},{"path":"/reference/alt_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a summary of the properties of an ALTREP object — alt_details","text":"x ALTREP object class","code":""},{"path":"/reference/alt_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a summary of the properties of an ALTREP object — alt_details","text":"list following entries: class_name (character scalar): see alt_classname() pkg_name (character scalar): see alt_classname() base_type (character scalar): see alt_type() data1 (anything): see alt_data1() data2 (anything): see alt_data2()","code":""},{"path":"/reference/alt_details.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Returns a summary of the properties of an ALTREP object — alt_details","text":"Warning: storing result cause R session crash deferred_string ALTREP object.","code":""},{"path":"/reference/alt_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a summary of the properties of an ALTREP object — alt_details","text":"","code":"alt_details(1:4) #> $class_name #> [1] \"compact_intseq\" #>  #> $pkg_name #> [1] \"base\" #>  #> $base_type #> [1] \"integer\" #>  #> $data1 #> [1] 4 1 1 #>  #> $data2 #> NULL #>"},{"path":"/reference/alt_inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspects an R data structure — alt_inspect","title":"Inspects an R data structure — alt_inspect","text":"Specifically prints kind tree includes memory addresses, SEXPTYPEs, ALTREP tidbits. useful particular ALTREP classes tend custom implementations inspect, can useful way summarise ALTREP state.","code":""},{"path":"/reference/alt_inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspects an R data structure — alt_inspect","text":"","code":"alt_inspect(x)"},{"path":"/reference/alt_inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspects an R data structure — alt_inspect","text":"x R object inspect","code":""},{"path":"/reference/alt_inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspects an R data structure — alt_inspect","text":"x, invisibly","code":""},{"path":"/reference/alt_inspect.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inspects an R data structure — alt_inspect","text":"re-export internal R function, outputs assumed stable.","code":""},{"path":"/reference/alt_inspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspects an R data structure — alt_inspect","text":"","code":"alt_inspect(1:5) #> @5642f15e8318 13 INTSXP g0c0 [REF(65535)]  1 : 5 (compact)"},{"path":"/reference/alt_pkgname.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the package in which an ALTREP class was defined — alt_pkgname","title":"Gets the package in which an ALTREP class was defined — alt_pkgname","text":"finds name package ALTREP class defined.","code":""},{"path":"/reference/alt_pkgname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the package in which an ALTREP class was defined — alt_pkgname","text":"","code":"alt_pkgname(x)"},{"path":"/reference/alt_pkgname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the package in which an ALTREP class was defined — alt_pkgname","text":"x ALTREP object class","code":""},{"path":"/reference/alt_pkgname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the package in which an ALTREP class was defined — alt_pkgname","text":"package name character scalar.","code":""},{"path":"/reference/alt_pkgname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the package in which an ALTREP class was defined — alt_pkgname","text":"","code":"alt_pkgname(1:3) #> [1] \"base\""},{"path":"/reference/alt_touch_dataptr.html","id":null,"dir":"Reference","previous_headings":"","what":"Touches the DATAPTR of a vector — alt_touch_dataptr","title":"Touches the DATAPTR of a vector — alt_touch_dataptr","text":"utility function accesses DATAPTR vector, touch anything else. DATAPTR pointer actual array data vector. useful often triggers certain behaviours ALTREP vectors like expanding full form.","code":""},{"path":"/reference/alt_touch_dataptr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Touches the DATAPTR of a vector — alt_touch_dataptr","text":"","code":"alt_touch_dataptr(x)"},{"path":"/reference/alt_touch_dataptr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Touches the DATAPTR of a vector — alt_touch_dataptr","text":"x R object","code":""},{"path":"/reference/alt_touch_dataptr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Touches the DATAPTR of a vector — alt_touch_dataptr","text":"x, invisibly, unchanged.","code":""},{"path":"/reference/alt_touch_dataptr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Touches the DATAPTR of a vector — alt_touch_dataptr","text":"","code":"x <- 1:5 compact_is_expanded(x) #> [1] FALSE alt_touch_dataptr(x) compact_is_expanded(x) #> [1] TRUE"},{"path":"/reference/alt_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the name of the type that this ALTREP is representing. — alt_type","title":"Gets the name of the type that this ALTREP is representing. — alt_type","text":"almost certainly return result typeof(x). However, author interested know !","code":""},{"path":"/reference/alt_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the name of the type that this ALTREP is representing. — alt_type","text":"","code":"alt_type(x)"},{"path":"/reference/alt_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the name of the type that this ALTREP is representing. — alt_type","text":"x ALTREP object class","code":""},{"path":"/reference/alt_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the name of the type that this ALTREP is representing. — alt_type","text":"name fundamental vector type x representing, character scalar. example \"integer\" \"character\".","code":""},{"path":"/reference/alt_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the name of the type that this ALTREP is representing. — alt_type","text":"","code":"alt_type(1:3) #> [1] \"integer\""},{"path":"/reference/compact_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list containing the fields of a compact vector — compact_details","title":"Returns a list containing the fields of a compact vector — compact_details","text":"Returns list containing fields compact vector","code":""},{"path":"/reference/compact_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list containing the fields of a compact vector — compact_details","text":"","code":"compact_details(x)"},{"path":"/reference/compact_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list containing the fields of a compact vector — compact_details","text":"x ALTREP vector class compact_realseq compact_intseq","code":""},{"path":"/reference/compact_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list containing the fields of a compact vector — compact_details","text":"list elements: length (integer scalar): length sequence start (integer scalar): first value sequence step (integer scalar) : increment entries sequence expanded (double, integer vector, NULL): non-ALTREP version x, NULL expanded","code":""},{"path":"/reference/compact_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a list containing the fields of a compact vector — compact_details","text":"","code":"compact_details(1:5) #> $length #> [1] 5 #>  #> $start #> [1] 1 #>  #> $step #> [1] 1 #>  #> $expanded #> NULL #>"},{"path":"/reference/compact_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Forces a compact vector into extended form — compact_expand","title":"Forces a compact vector into extended form — compact_expand","text":"allocate entire vector standard representation vector, store data2 slot. Note: modifies x -place, modify copies x, irreversible.","code":""},{"path":"/reference/compact_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forces a compact vector into extended form — compact_expand","text":"","code":"compact_expand(x)"},{"path":"/reference/compact_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forces a compact vector into extended form — compact_expand","text":"x ALTREP vector class compact_realseq compact_intseq","code":""},{"path":"/reference/compact_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forces a compact vector into extended form — compact_expand","text":"x, copy x, invisibly","code":""},{"path":"/reference/compact_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forces a compact vector into extended form — compact_expand","text":"","code":"x <- 1:3 compact_is_expanded(x) #> [1] FALSE compact_expand(x) compact_is_expanded(x) #> [1] TRUE"},{"path":"/reference/compact_is_expanded.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a compact vector has been expanded — compact_is_expanded","title":"Checks if a compact vector has been expanded — compact_is_expanded","text":"Checks compact vector expanded","code":""},{"path":"/reference/compact_is_expanded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a compact vector has been expanded — compact_is_expanded","text":"","code":"compact_is_expanded(x)"},{"path":"/reference/compact_is_expanded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a compact vector has been expanded — compact_is_expanded","text":"x ALTREP vector class compact_realseq compact_intseq","code":""},{"path":"/reference/compact_is_expanded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a compact vector has been expanded — compact_is_expanded","text":"logical scalar. TRUE vector expanded, FALSE compact","code":""},{"path":"/reference/compact_is_expanded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a compact vector has been expanded — compact_is_expanded","text":"","code":"x <- 1:3 compact_is_expanded(x) #> [1] FALSE compact_expand(x) compact_is_expanded(x) #> [1] TRUE"},{"path":"/reference/compact_to_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a non-ALTREP copy of a compact vector — compact_to_standard","title":"Returns a non-ALTREP copy of a compact vector — compact_to_standard","text":"Returns non-ALTREP copy compact vector","code":""},{"path":"/reference/compact_to_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a non-ALTREP copy of a compact vector — compact_to_standard","text":"","code":"compact_to_standard(x)"},{"path":"/reference/compact_to_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a non-ALTREP copy of a compact vector — compact_to_standard","text":"x ALTREP vector class compact_realseq compact_intseq","code":""},{"path":"/reference/compact_to_standard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a non-ALTREP copy of a compact vector — compact_to_standard","text":"","code":"x <- compact_to_standard(1:5) is_altrep(x) #> [1] FALSE"},{"path":"/reference/deferred_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Forces a deferred string into extended form — deferred_expand","title":"Forces a deferred string into extended form — deferred_expand","text":"Forces deferred string extended form","code":""},{"path":"/reference/deferred_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forces a deferred string into extended form — deferred_expand","text":"","code":"deferred_expand(x)"},{"path":"/reference/deferred_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forces a deferred string into extended form — deferred_expand","text":"x Character vector deferred_string ALTREP class","code":""},{"path":"/reference/deferred_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forces a deferred string into extended form — deferred_expand","text":"x, copy x, invisibly","code":""},{"path":"/reference/deferred_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forces a deferred string into extended form — deferred_expand","text":"","code":"x <- as.character(1:3) deferred_expand(x) alt_inspect(x) #> @5642f413bce8 16 STRSXP g0c0 [REF(4)]   <expanded string conversion> #>   @5642f5664058 16 STRSXP g0c3 [REF(1)] (len=3, tl=0) #>     @5642ef130eb8 09 CHARSXP g1c1 [MARK,REF(2338),gp=0x61] [ASCII] [cached] \"1\" #>     @5642eef76a08 09 CHARSXP g1c1 [MARK,REF(2384),gp=0x61] [ASCII] [cached] \"2\" #>     @5642ef475020 09 CHARSXP g1c1 [MARK,REF(1010),gp=0x61] [ASCII] [cached] \"3\""},{"path":"/reference/deferred_is_expanded.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks is a deferred string has been expanded — deferred_is_expanded","title":"Checks is a deferred string has been expanded — deferred_is_expanded","text":"See deferred_expand() force deferred string expand.","code":""},{"path":"/reference/deferred_is_expanded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks is a deferred string has been expanded — deferred_is_expanded","text":"","code":"deferred_is_expanded(x)"},{"path":"/reference/deferred_is_expanded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks is a deferred string has been expanded — deferred_is_expanded","text":"x Character vector deferred_string ALTREP class","code":""},{"path":"/reference/deferred_is_expanded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks is a deferred string has been expanded — deferred_is_expanded","text":"Logical scalar. TRUE x expanded, otherwise FALSE.","code":""},{"path":"/reference/deferred_is_expanded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks is a deferred string has been expanded — deferred_is_expanded","text":"","code":"x <- as.character(1) deferred_is_expanded(x) #> [1] FALSE deferred_expand(x) deferred_is_expanded(x) #> [1] TRUE"},{"path":"/reference/is_altrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if an R object is ALTREP — is_altrep","title":"Checks if an R object is ALTREP — is_altrep","text":"checks x instance ALTREP class. Notably check x ALTREP class (ie return value alt_class()), difficult achieve.","code":""},{"path":"/reference/is_altrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if an R object is ALTREP — is_altrep","text":"","code":"is_altrep(x)"},{"path":"/reference/is_altrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if an R object is ALTREP — is_altrep","text":"x R object","code":""},{"path":"/reference/is_altrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if an R object is ALTREP — is_altrep","text":"scalar logical. TRUE x ALTREP, otherwise FALSE.","code":""},{"path":"/reference/is_altrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if an R object is ALTREP — is_altrep","text":"","code":"is_altrep(1) #> [1] FALSE is_altrep(1:2) #> [1] TRUE"},{"path":"/reference/is_compact_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for compact sequence ALTREPs — is_compact_vec","title":"Checks for compact sequence ALTREPs — is_compact_vec","text":"Checks compact sequence ALTREPs","code":""},{"path":"/reference/is_compact_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for compact sequence ALTREPs — is_compact_vec","text":"","code":"is_compact_vec(x)"},{"path":"/reference/is_compact_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for compact sequence ALTREPs — is_compact_vec","text":"x R object","code":""},{"path":"/reference/is_compact_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for compact sequence ALTREPs — is_compact_vec","text":"scalar logical. TRUE x compact sequence, otherwise FALSE","code":""},{"path":"/reference/is_compact_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for compact sequence ALTREPs — is_compact_vec","text":"","code":"is_compact_vec(1:3) #> [1] TRUE"},{"path":"/reference/is_deferred_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for deferred string ALTREPs — is_deferred_string","title":"Checks for deferred string ALTREPs — is_deferred_string","text":"Checks deferred string ALTREPs","code":""},{"path":"/reference/is_deferred_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for deferred string ALTREPs — is_deferred_string","text":"","code":"is_deferred_string(x)"},{"path":"/reference/is_deferred_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for deferred string ALTREPs — is_deferred_string","text":"x R object","code":""},{"path":"/reference/is_deferred_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for deferred string ALTREPs — is_deferred_string","text":"Logical scalar. TRUE x deferred_string ALTREP, otherwise FALSE","code":""},{"path":"/reference/is_deferred_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for deferred string ALTREPs — is_deferred_string","text":"","code":"is_deferred_string(\"hi\") #> [1] FALSE is_deferred_string(as.character(1)) #> [1] TRUE"},{"path":"/reference/is_mmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for memmap vector ALTREPs — is_mmap","title":"Checks for memmap vector ALTREPs — is_mmap","text":"Checks memmap vector ALTREPs","code":""},{"path":"/reference/is_mmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for memmap vector ALTREPs — is_mmap","text":"","code":"is_mmap(x)"},{"path":"/reference/is_mmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for memmap vector ALTREPs — is_mmap","text":"x R object","code":""},{"path":"/reference/is_mmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for memmap vector ALTREPs — is_mmap","text":"scalar logical. TRUE x mmap vector, otherwise FALSE","code":""},{"path":"/reference/is_mmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for memmap vector ALTREPs — is_mmap","text":"","code":"is_mmap(1) #> [1] FALSE mmap_make(data = 1:100) |> is_mmap() #> [1] TRUE"},{"path":"/reference/is_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for wrapper object ALTREPs — is_wrapper","title":"Checks for wrapper object ALTREPs — is_wrapper","text":"Checks wrapper object ALTREPs","code":""},{"path":"/reference/is_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for wrapper object ALTREPs — is_wrapper","text":"","code":"is_wrapper(x)"},{"path":"/reference/is_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for wrapper object ALTREPs — is_wrapper","text":"x R object","code":""},{"path":"/reference/is_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for wrapper object ALTREPs — is_wrapper","text":"Logical scalar. TRUE x wrapper ALTREP, otherwise FALSE","code":""},{"path":"/reference/is_wrapper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for wrapper object ALTREPs — is_wrapper","text":"","code":"is_wrapper(\"5:1\") #> [1] FALSE sort(5:1) |> is_wrapper() #> [1] TRUE"},{"path":"/reference/mmap_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list containing the fields of a memory mapped vector — mmap_details","title":"Returns a list containing the fields of a memory mapped vector — mmap_details","text":"Returns list containing fields memory mapped vector","code":""},{"path":"/reference/mmap_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list containing the fields of a memory mapped vector — mmap_details","text":"","code":"mmap_details(x)"},{"path":"/reference/mmap_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list containing the fields of a memory mapped vector — mmap_details","text":"x vector mmap ALTREP class","code":""},{"path":"/reference/mmap_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list containing the fields of a memory mapped vector — mmap_details","text":"list fields: file_name: character scalar. file name file mapped size_bytes: integer scalar. number bytes memory map length: integer scalar. number entries memory mapped vector type: \"double\", \"integer\", indicating data type memory map ptrOK: logical scalar. Unknown meaning wrtOK: logical scalar. TRUE writing memory map allowed serOK: logical scalar. Unknown meaning","code":""},{"path":"/reference/mmap_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a list containing the fields of a memory mapped vector — mmap_details","text":"","code":"mmap_make(data = 1:10) |> mmap_details() #> $file_name #> [1] \"/tmp/RtmpP8knXX/file1430c7b714c6\" #>  #> $size_bytes #> [1] 40 #>  #> $length #> [1] 10 #>  #> $type #> [1] \"integer\" #>  #> $ptrOK #> [1] TRUE #>  #> $wrtOK #> [1] FALSE #>  #> $serOK #> [1] FALSE #>"},{"path":"/reference/mmap_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a memory-mapped vector — mmap_make","title":"Makes a memory-mapped vector — mmap_make","text":"Makes memory-mapped vector","code":""},{"path":"/reference/mmap_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a memory-mapped vector — mmap_make","text":"","code":"mmap_make(path = NULL, data = NULL, type = NULL)"},{"path":"/reference/mmap_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a memory-mapped vector — mmap_make","text":"path Path existing file, file write data provided data double integer vector write path, NULL read . type Either \"double\" \"integer\", indicating data type read disk. provided, assumed type data.","code":""},{"path":"/reference/mmap_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a memory-mapped vector — mmap_make","text":"memory mapped vector, using contents path","code":""},{"path":"/reference/mmap_make.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a memory-mapped vector — mmap_make","text":"","code":"mmap_make(   tempfile(),   rnorm(n=5) ) #> [1]  0.3735160  0.9206572 -0.4462072 -0.8976637  0.4869897"},{"path":"/reference/set_alt_data1.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the data1 value of an ALTREP — set_alt_data1","title":"Sets the data1 value of an ALTREP — set_alt_data1","text":"use function unless know just care R session. set data unexpected value likely cause SEGFAULT crash entire R session. Also, modifies existing object -place, meaning variables pointing ALTREP modified.","code":""},{"path":"/reference/set_alt_data1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the data1 value of an ALTREP — set_alt_data1","text":"","code":"set_alt_data1(x, value)"},{"path":"/reference/set_alt_data1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the data1 value of an ALTREP — set_alt_data1","text":"x ALTREP object modify value new value altrep_data1 slot","code":""},{"path":"/reference/set_alt_data1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the data1 value of an ALTREP — set_alt_data1","text":"x, invisibly (x modified -place generally want need store return value)","code":""},{"path":"/reference/set_alt_data1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the data1 value of an ALTREP — set_alt_data1","text":"","code":"x <- 1:5 set_alt_data1(x, c(10, 10, -1)) x #>  [1] 10  9  8  7  6  5  4  3  2  1"},{"path":"/reference/set_alt_data2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the data2 value of an ALTREP — set_alt_data2","title":"Sets the data2 value of an ALTREP — set_alt_data2","text":"use function unless know just care R session. set data unexpected value likely cause SEGFAULT crash entire R session. Also, modifies existing object -place, meaning variables pointing ALTREP modified.","code":""},{"path":"/reference/set_alt_data2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the data2 value of an ALTREP — set_alt_data2","text":"","code":"set_alt_data2(x, value)"},{"path":"/reference/set_alt_data2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the data2 value of an ALTREP — set_alt_data2","text":"x ALTREP object modify value new value altrep_data2 slot","code":""},{"path":"/reference/set_alt_data2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the data2 value of an ALTREP — set_alt_data2","text":"x, invisibly (x modified -place generally want need store return value)","code":""},{"path":"/reference/set_alt_data2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the data2 value of an ALTREP — set_alt_data2","text":"","code":"x <- 1:5 set_alt_data2(x, 10:15) x #> [1] 10 11 12 13 14"},{"path":"/reference/wrapper_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list containing the fields of a wrapper object — wrapper_details","title":"Returns a list containing the fields of a wrapper object — wrapper_details","text":"Returns list containing fields wrapper object","code":""},{"path":"/reference/wrapper_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list containing the fields of a wrapper object — wrapper_details","text":"","code":"wrapper_details(x)"},{"path":"/reference/wrapper_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list containing the fields of a wrapper object — wrapper_details","text":"x R object belonging wrap ALTREP class","code":""},{"path":"/reference/wrapper_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list containing the fields of a wrapper object — wrapper_details","text":"list following entries: contents: R object. underlying object wrapped has_na: Logical scalar. TRUE contents might contain NA, FALSE definitely . is_sorted: Logical scalar. TRUE contents sorted order descending: Logical scalar. TRUE contents sorted descending order, FALSE sorted ascending order, NA sorted sorting status unknown. na_first Logical scalar. TRUE contents sorted order puts NA values first, FALSE sorted last, NA contents unsorted sorting status unknown","code":""},{"path":"/reference/wrapper_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a list containing the fields of a wrapper object — wrapper_details","text":"","code":"sort(5:1) |> wrapper_details() #> $contents #> [1] 1 2 3 4 5 #>  #> $has_na #> [1] FALSE #>  #> $is_sorted #> [1] TRUE #>  #> $descending #> [1] FALSE #>  #> $na_first #> [1] FALSE #>"},{"path":"/reference/wrapper_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a custom wrapper ALTREP — wrapper_make","title":"Makes a custom wrapper ALTREP — wrapper_make","text":"Makes custom wrapper ALTREP","code":""},{"path":"/reference/wrapper_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a custom wrapper ALTREP — wrapper_make","text":"","code":"wrapper_make(   x,   has_na = FALSE,   is_sorted = NA,   descending = FALSE,   na_first = FALSE )"},{"path":"/reference/wrapper_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a custom wrapper ALTREP — wrapper_make","text":"x R object wrap has_na Logical scalar. FALSE x considered free NA values, otherwise set TRUE is_sorted Logical scalar. TRUE x considered sorted, FALSE considered unsorted, NA sorted status unknown descending Logical scalar. TRUE x considered sorted descending order, FALSE ascending order. x unsorted unused. na_first Logical scalar. TRUE x treated NA values start vector, FALSE end. x unsorted unused.","code":""},{"path":"/reference/wrapper_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a custom wrapper ALTREP — wrapper_make","text":"object identical x hidden ALTREP metadata applied .","code":""},{"path":"/reference/wrapper_make.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a custom wrapper ALTREP — wrapper_make","text":"","code":"wrapper <- wrapper_make(c(5, 3, NA, 1), is_sorted = TRUE, has_na = FALSE) wrapper_details(wrapper) #> $contents #> [1]  5  3 NA  1 #>  #> $has_na #> [1] FALSE #>  #> $is_sorted #> [1] TRUE #>  #> $descending #> [1] FALSE #>  #> $na_first #> [1] FALSE #>"}]
